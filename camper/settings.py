"""
Django settings for camper project.

Generated by 'django-admin startproject' using Django 1.9.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import re
import json
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.flatpages',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'herokal',
    'compressor',
    'storages',
    'markdown_deux',
    'markitup',
    'reversion',
    # 'mptt',
    # 'treenav',
    'social.apps.django_app.default',
    'tastypie',
    # 'djutils',
    'django_twilio',
    'honeypot',
    'bootstrap3',
    'taggit',

    # 'django_pdb',
    'admin_enhancer',
    'django_extensions',
    'debug_toolbar',
    'template_repl',
    'gunicorn',
    'varnishapp',
    'raven.contrib.django.raven_compat',

    'camper.api',
    'camper.brainstorm',
    'camper.camp',
    'camper.pages',
    'camper.reg',
    'camper.sked',
    'camper.sms',
    # 'camper.twit',

]

MIDDLEWARE_CLASSES = [
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'camper.middleware.ConditionalSessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'camper.middleware.ConditionalCsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    'camper.middleware.ConditionalAuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    'camper.middleware.ConditionalMessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social.apps.django_app.middleware.SocialAuthExceptionMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
    # 'django_pdb.middleware.PdbMiddleware',
]

ROOT_URLCONF = 'camper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'camper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'googleauth.backends.GoogleAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
    'social.backends.twitter.TwitterOAuth',
    'social.backends.facebook.FacebookOAuth2',
    'social.backends.google.GoogleOAuth2',
    'social.backends.github.GithubOAuth2',
    'social.backends.disqus.DisqusOAuth2',
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Markitup Settings
# https://pypi.python.org/pypi/django-markitup
MARKITUP_FILTER = ('markdown.markdown', {'safe_mode': True})

# # AWS Settings

# # This determines which folder static assets and media will be written to on S3.
# ASSET_SITE_VERSION = '3.1'

# AWS_QUERYSTRING_AUTH = False
# AWS_S3_SECURE_URLS = True
# AWS_PRELOAD_METDATA = True
# AWS_HEADERS = {
#     "Vary": "Accept-Encoding",
#     "Cache-Control": "max-age=86400",
#     "Expires": "Sat, 3 May 2014 00:00:00 GMT"
# }
# AWS_STORAGE_BUCKET_NAME = "assets.transparencycamp.org"
# S3_URL = 'https://assets.transparencycamp.org.s3.amazonaws.com/%s/' % ASSET_SITE_VERSION

# COMPRESS_STORAGE = 's3utils.StaticRootS3BotoStorage'
# COMPRESS_ROOT = os.path.join(PROJECT_ROOT, 'static-cache')
# COMPRESS_URL = S3_URL + 'static/'
# COMPRESS_CSS_FILTERS = (
#     'compressor.filters.cssmin.CSSMinFilter',
#     'compressor.filters.css_default.CssAbsoluteFilter',
# )
# # COMPRESS_CSS_HASHING_METHOD = 'content'
# COMPRESS_JS_FILTERS = (
#     'compressor.filters.jsmin.JSMinFilter',
# )

# STATICFILES_STORAGE = COMPRESS_STORAGE
# STATIC_ROOT = COMPRESS_ROOT
# STATIC_URL = COMPRESS_URL

# DEFAULT_FILE_STORAGE = 's3utils.MediaRootS3BotoStorage'
# MEDIA_ROOT = os.path.join(PROJECT_ROOT, 'media-cache')
# MEDIA_URL = S3_URL + 'media/'

from herokal.settings import *
