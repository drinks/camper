# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-06 05:07
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import markupfield.fields
import taggit.managers
import timedelta.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AutoTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('description', markupfield.fields.MarkupField(blank=True, rendered_field=True)),
                ('description_markup_type', models.CharField(blank=True, choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown')], default=None, max_length=30, null=True)),
                ('overview', markupfield.fields.MarkupField(blank=True, rendered_field=True)),
                ('_description_rendered', models.TextField(editable=False)),
                ('start_date', models.DateField(db_index=True)),
                ('overview_markup_type', models.CharField(blank=True, choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown')], default=None, max_length=30, null=True)),
                ('end_date', models.DateField(blank=True, db_index=True, null=True)),
                ('_overview_rendered', models.TextField(editable=False)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('is_over', models.BooleanField(db_index=True, default=False)),
                ('registration_is_open', models.BooleanField(default=False)),
                ('registration_url', models.URLField(blank=True, default='')),
                ('session_submission_is_open', models.BooleanField(default=False)),
                ('label', models.CharField(default='event', max_length=64)),
                ('session_label', models.CharField(default='session', max_length=64)),
                ('session_length', timedelta.fields.TimedeltaField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sked_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-start_date',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('is_official', models.BooleanField(db_index=True, default=False)),
                ('has_sessions', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='sked.Event')),
            ],
            options={
                'ordering': ('-event__start_date', 'name'),
            },
        ),
        migrations.CreateModel(
            name='SentEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipients', models.CharField(max_length=255)),
                ('sender', models.EmailField(max_length=127)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('sent_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=102)),
                ('slug', models.SlugField()),
                ('description', markupfield.fields.MarkupField(blank=True, help_text='Markdown is supported.', rendered_field=True)),
                ('speakers', django.contrib.postgres.fields.jsonb.JSONField(blank=True, db_index=True, default='[]', help_text='An array of objects. Each must contain a "name" attribute')),
                ('description_markup_type', models.CharField(choices=[('', '--'), ('html', 'HTML'), ('plain', 'Plain'), ('markdown', 'Markdown')], default='markdown', editable=False, max_length=30)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default='{}')),
                ('_description_rendered', models.TextField(editable=False)),
                ('user_notes', models.TextField(blank=True, default='', help_text="Note in this space if you need to request a specific timeslot, or make sure you have a projector, etc. We can't make guarantees about anything, but we'll do our best.")),
                ('hashtag', models.CharField(blank=True, help_text="Help others find and share info about your session! Include the '#'.", max_length=140, null=True)),
                ('is_public', models.BooleanField(db_index=True, default=False)),
                ('has_notes', models.BooleanField(default=True)),
                ('notes_slug', models.SlugField(blank=True, help_text='Set this to override the default slug (i.e., If you want more than one session to have the same pad.')),
                ('start_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('admin_notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('auto_tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='sked.AutoTags', to='taggit.Tag', verbose_name='Tags')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='sked.Event')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='sked.Location')),
                ('published_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='approved_sked_sessions', to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text="Help us schedule your session so that it doesn't conflict with other sessions around the same topics. Some example tags: Open data, International, Federal, State, Parliamentary Monitoring, Social Media, Design, Lobbying.", through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ('-event__start_date', 'start_time'),
            },
        ),
        migrations.AddField(
            model_name='sentemail',
            name='session',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sked.Session'),
        ),
        migrations.AddField(
            model_name='autotags',
            name='content_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sked.Session'),
        ),
        migrations.AddField(
            model_name='autotags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sked_autotags_items', to='taggit.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='session',
            unique_together=set([('event', 'slug')]),
        ),
    ]
